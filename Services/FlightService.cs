#nullable enable
using System;
using System.Net.Http.Json;
using System.Threading.Tasks;
using FlightValidationService.Data;
using FlightValidationService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;

namespace FlightValidationService.Services
{
  public class FlightService : IFlightService
  {
    private readonly AppDbContext _context;
    private readonly IMemoryCache _cache;
    private readonly IHttpClientFactory _httpClientFactory;
    private const string KoltsovoCode = "s9600370";

    public FlightService(AppDbContext context, IMemoryCache cache, IHttpClientFactory httpClientFactory)
    {
      _context = context;
      _cache = cache;
      _httpClientFactory = httpClientFactory;
    }

    private string GetCacheKey(string flightNumber, string departureTime)
    {
      if (flightNumber is null) throw new ArgumentNullException(nameof(flightNumber));
      if (departureTime is null) throw new ArgumentNullException(nameof(departureTime));
      return $"{flightNumber.Replace(" ", "").ToLower()}_{departureTime}";
    }

    public async Task LoadCacheFromDatabaseAsync()
    {
      var allFlights = await _context.Flights
          .AsNoTracking()
          .ToListAsync();

      foreach (var f in allFlights)
      {
        var key = GetCacheKey(f.FlightNumber!, f.DepartureTime!);
        _cache.Set(key, f, new MemoryCacheEntryOptions
        {
          AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30)
        });
      }
    }

    public async Task<Flight?> GetFlightFromCacheOrDbAsync(string flightNumber, string? departureTime = null)
    {
      if (flightNumber is null) throw new ArgumentNullException(nameof(flightNumber));

      var normalized = flightNumber.Replace(" ", "").ToLower().Trim();
      string key;
      if (departureTime is null)
      {
        // –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞–∫ –∫–ª—é—á
        key = normalized;
      }
      else
      {
        key = GetCacheKey(normalized, departureTime);
      }

      // –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞ (cached –º–æ–∂–µ—Ç –±—ã—Ç—å null)
      if (_cache.TryGetValue(key, out Flight? cached) && cached is not null)
        return cached;

      var flight = await _context.Flights
          .AsNoTracking()
          .FirstOrDefaultAsync(f =>
              f.FlightNumber!.Replace(" ", "").ToLower() == normalized &&
              (departureTime == null || f.DepartureTime == departureTime)
          );

      if (flight is not null)
      {
        // –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á —Å –≤—Ä–µ–º–µ–Ω–µ–º
        var cacheKey = GetCacheKey(normalized, flight.DepartureTime!);
        _cache.Set(cacheKey, flight, new MemoryCacheEntryOptions
        {
          AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30)
        });
      }

      return flight;
    }

    public async Task UpdateFlightsAsync()
    {
      Console.WriteLine("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...");

      var client = _httpClientFactory.CreateClient();
      var date = DateTime.UtcNow.ToString("yyyy-MM-dd");
      var url = $"https://api.rasp.yandex.net/v3.0/schedule/?station={KoltsovoCode}" +
                $"&transport_types=plane&event=departure&date={date}&apikey=48aeaffd-917a-4a69-a9f4-3a3991c0e4ac";

      try
      {
        var response = await client.GetFromJsonAsync<YandexApiResponse>(url);
        if (response?.Schedule is not { Count: > 0 })
        {
          Console.WriteLine("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç");
          return;
        }

        Console.WriteLine($"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–π—Å–æ–≤: {response.Schedule.Count}");

        foreach (var item in response.Schedule)
        {
          if (item?.Thread?.Number is null || item.Departure is null)
          {
            Console.WriteLine("‚ùó –ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–≥–º–µ–Ω—Ç: –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ä–µ–π—Å–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ª–µ—Ç–∞");
            continue;
          }

          if (!DateTimeOffset.TryParse(item.Departure, out var departureDto))
          {
            Console.WriteLine($"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {item.Departure}");
            continue;
          }

          var departureTimeString = departureDto
              .ToOffset(TimeSpan.FromHours(5))
              .ToString("HH:mm");

          var flight = new Flight
          {
            FlightNumber = item.Thread.Number!,
            DepartureTime = departureTimeString,
            Status = "on_time",
            Source = "external",
            EditedByAdmin = false,
            LastUpdated = DateTime.UtcNow
          };

          var existing = await _context.Flights.FirstOrDefaultAsync(f =>
              f.FlightNumber == flight.FlightNumber &&
              f.DepartureTime == flight.DepartureTime);

          if (existing == null)
          {
            _context.Flights.Add(flight);
            Console.WriteLine("‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–π—Å –≤ –±–∞–∑—É");
          }
          else if (!existing.EditedByAdmin.GetValueOrDefault())
          {
            existing.Status = flight.Status;
            existing.Source = flight.Source;
            existing.LastUpdated = DateTime.UtcNow;
            Console.WriteLine("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–π—Å");
          }
        }

        await _context.SaveChangesAsync();
        Console.WriteLine("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");

        await LoadCacheFromDatabaseAsync();
      }
      catch (Exception ex)
      {
        Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å API:");
        Console.WriteLine(ex.Message);
      }

      Console.WriteLine("‚è± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...");
    }
  }
}
#nullable restore
